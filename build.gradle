def currentVersion = new File("${projectDir}/version.txt").text.trim();

task checkEnvironment(group: 'check', description: 'Check the user provided gradle.properties') << {
    def ndkDir = System.env.NDK_HOME
    if (!ndkDir) {
        throw new GradleException('The NDK_HOME environment variable is not set.')
    } else if (ndkDir.endsWith('/')) {
        throw new GradleException('The NDK_HOME environment variable ends with /')
    } else if (!file(ndkDir).directory) {
        throw new GradleException('The path provided in the NDK_HOME environment variable is not a folder.')
    } else if (!file(new File(ndkDir, 'RELEASE.TXT')).file) {
        throw new GradleException('The path provided in the NDK_HOME environment variable does not seem to be an Android NDK.')
    }

    def sdkDir = System.env.ANDROID_HOME
    if (!sdkDir) {
        throw new GradleException('The ANDROID_HOME environment variable is not set.')
    } else if (sdkDir.endsWith('/')) {
        throw new GradleException('The ANDROID_HOME environment variable ends with /')
    } else if (!file(sdkDir).directory) {
        throw new GradleException('The path provided in the ANDROID_HOME environment variable is not a folder.')
    } else if (!file(new File(sdkDir, 'RELEASE.TXT')).file) {
        throw new GradleException('The path provided in the ANDROID_HOME environment variable does not seem to be an Android NDK.')
    }
}

task assembleGradlePlugin(type:GradleBuild) {
    group = 'Build'
    buildFile = file('gradle-plugin/build.gradle')
    tasks = ['assemble']
}

task assembleRealm(type:GradleBuild) {
    group = 'Build'
    buildFile = file('realm/build.gradle')
    tasks = ['assemble']
}

task installGradlePlugin(type:GradleBuild) {
    group = 'Install'
    buildFile = file('gradle-plugin/build.gradle')
    tasks = ['uploadArchives']
}

task installRealm(type:GradleBuild) {
    group = 'Install'
    buildFile = file('realm/build.gradle')
    tasks = ['uploadArchives']
}

task assembleExamples(type:GradleBuild) {
    dependsOn installGradlePlugin
    dependsOn installRealm
    group = 'Build'
    buildFile = file('examples/build.gradle')
    tasks = ['assemble']
}

task javadoc(type:GradleBuild) {
    group = 'Docs'
    buildFile = file('realm/build.gradle')
    tasks = ['javadocJar']
}

task eclipseJar(type:GradleBuild) {
    group = 'Artifact'
    buildFile = file('realm/build.gradle')
    tasks = ['shadowJar']
}

task distributionPackage(type:Zip) {
    dependsOn eclipseJar
    dependsOn assembleRealm
    dependsOn javadocs

    group = 'Artifact'
    archiveName = 'realm-android.zip'

    from('changelog.txt')
    from('LICENSE')
    from('version.txt')
    from('realm/realm-annotations-processor/build/libs') {
        include 'realm-android-*.jar'
        into 'eclipse'
    }
    from('realm/realm-library/src/main/jniLibs/') {
        include '**/*'
        into 'eclipse'
    }
    from('realm/realm-library/build/libs') {
        include 'realm-android-*-javadoc.jar'
        into 'docs'
    }
    from('realm/realm-library/build/docs') {
        include '**/*'
        into 'docs'
    }
    from('examples') {
        exclude 'local.properties'
        exclude '**/gradle'
        exclude '**/.gradle'
        exclude '**/build'
        into 'examples'
    }
}

def commonPom = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    issueManagement {
        system 'github'
        url 'https://github.com/realm/realm-java/issues'
    }
    scm {
        url 'scm:https://github.com/realm/realm-java'
        connection 'scm:git@github.com:realm/realm-java.git'
        developerConnection 'scm:git@github.com:realm/realm-java.git'
    }
}

publishing {
    publications {
        library(MavenPublication) {
            artifactId = 'realm-android'
            artifact file("${rootDir}/realm/realm-library/build/outputs/aar/realm-library-release.aar")
            artifact file("${rootDir}/realm/realm-library/build/outputs/aar/realm-android-${currentVersion}-sources.aar")
            artifact file("${rootDir}/realm/realm-library/build/outputs/aar/realm-android-${currentVersion}-javadoc.aar")
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-android')
                root.appendNode('description', 'Realm is a mobile database: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')
                root.appendNode('packaging', 'aar')
                root.children().last() + commonPom
            }
        }
        annotations(MavenPublication) {
            artifactId = 'realm-annotations'
            artifact file("${rootDir}/realm/realm-annotations/build/libs/realm-annotations-${currentVersion}.jar")
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-annotations')
                root.appendNode('description', 'Annotations for Realm: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')
                root.appendNode('packaging', 'jar')
                root.children().last() + commonPom
            }
        }
        annotationsProcessor(MavenPublication) {
            artifactId = 'realm-annotations-processor'
            artifact file("${rootDir}/realm/realm-annotations-processor/build/libs/realm-annotations-processor-${currentVersion}.jar")
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-annotations-processor')
                root.appendNode('description', 'Annotations processor for Realm: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')
                root.appendNode('packaging', 'jar')
                root.children().last() + commonPom
            }
        }
        gradlePlugin(MavenPublication) {
            artifactId = 'gradle-realm-plugin'
            artifact file("${rootDir}/gradle-plugin/build/libs/gradle-plugin-${currentVersion}.jar")
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'gradle-realm-plugin')
                root.appendNode('description', 'Gradle plugin for Realm: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')
                root.appendNode('packaging', 'jar')
                root.children().last() + commonPom
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
        }
        defaults {
            publications ('library', 'annotations', 'annotationsProcessor', 'gradlePlugin')
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
    key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'

    dryRun = true
    publish = false

    publications = ['library', 'annotations', 'annotationsProcessor', 'gradlePlugin']
    pkg {
        repo = 'maven'
        name = 'realm-android'
        desc = 'Realm for Android'
        websiteUrl = siteUrl
        issueTrackerUrl = "${siteUrl}/issues"
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = ['aar', 'android', 'realm']
        publicDownloadNumbers = false
    }
}
