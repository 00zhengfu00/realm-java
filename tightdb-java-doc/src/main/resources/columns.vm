#macro(inside)$!bodyContent#end

#macro(column $ret_type $name $params $desc)
							  <tr bgcolor="white" class="TableRowColor"><td><tt>${ret_type} <b>${name} </b>(${params})</tt></td><td>${desc}</td></tr>
#end

#macro(query_column $name $params $desc)
#column("Query", $name $params "Represents <b>'$desc'</b> criterium")
#end

#macro(bool_query_columns)
#query_column("equal/eq", "Boolean value", "equal to")
#query_column("notEqual/neq", "Boolean value", "not equal to")
#end

#macro(num_query_columns)
#query_column("equal/eq", "long value", "equal to")
#query_column("notEqual/neq", "long value", "not equal to")
#query_column("greaterThan/gt", "long value", "greater than")
#query_column("greaterThanOrEqual/gte", "long value", "greater than or equal to")                             
#query_column("lessThan/lt", "long value", "less than")
#query_column("lessThanOrEqual/lte", "long value", "less than or equal to")
#query_column("between", "long value_1", "long value_2", "belongs to interval between <tt>value_1</tt> and <tt>value_2</tt>")
#end

#macro(string_query_columns)
#query_column("equal/eq", "String value", "equal to")
#query_column("notEqual/neq", "String value", "not equal to")
#query_column("beginsWith", "String value", "substring match at the begining of the text")
#query_column("endsWith", "String value", "substring match at the end of the text")
#query_column("contains", "String value", "substring search")
#end

#macro(table_or_view_columns_common $column_type)
#column("${column_type}[]", "getAll", "", "Get all values for the represented column")
#column("void", "setAll", "${column_type} value", "Set all values for the represented column")
#end

#macro(binary_table_or_view_columns)
#table_or_view_columns_common("ByteBuffer")
#end

#macro(bool_table_or_view_columns)
#table_or_view_columns_common("Boolean")
#bool_query_columns()
#column("Row", "findFirst", "Boolean value", "Find first row having the specified column value")
#column("View", "findAll", "Boolean value", "Find all rows having the specified column value")
#end

#macro(date_table_or_view_columns)
#table_or_view_columns_common("Date")
#column("Row", "findFirst", "Date value", "Find first row having the specified column value")
#column("View", "findAll", "Date value", "Find all rows having the specified column value")
#end

#macro(num_table_or_view_columns)
#table_or_view_columns_common("Long")
#column("void", "addLong", "long value", "Add the value to all cells in the represented column")
#column("long", "sum", "", "Calculate the sum of all values for the represented column")
#column("long", "minimum", "", "Calculate the minimal value for the represented column")
#column("long", "maximum", "", "Calculate the maximal value for the represented column")
#column("Row", "findFirst", "long value", "Find first row having the specified column value")
#column("View", "findAll", "long value", "Find all rows having the specified column value")
#num_query_columns()
#end

#macro(mixed_table_or_view_columns)
#table_or_view_columns_common("Mixed")
#end

#macro(string_table_or_view_columns)
#table_or_view_columns_common("String")
#column("Row", "findFirst", "String value", "Find first row having the specified column value")
#column("View", "findAll", "String value", "Find all rows having the specified column value")
#string_query_columns()
#end

#macro(table_table_or_view_columns)
#column("Table[]", "getAll", "", "Get all subtables for the represented column")
#end

#macro(columns_html $col_type)
                      <dd><p><b>For ${col_type} columns:</b></p></dd>
                      <dd><p><table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
                        	<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
                              <th>Method</th><th>Description</th></tr>
#inside()
                            </tbody>
                          </table>
                        </p>
                      </dd>
#end

#macro(table_or_view_methods)

#@columns_html("binary")
#binary_table_or_view_columns()
#end

#@columns_html("boolean")
#bool_table_or_view_columns()
#end

#@columns_html("date")
#date_table_or_view_columns()
#end

#@columns_html("long")
#num_table_or_view_columns()
#end

#@columns_html("mixed")
#mixed_table_or_view_columns()
#end

#@columns_html("String")
#string_table_or_view_columns()
#end

#@columns_html("table")
#table_table_or_view_columns()
#end

#end

                    <dl>
                      <dd><p> The tables show the declared methods for various types of column fields for a ${class}:</p></dd>
					  
#if($class == "table")

#table_or_view_methods()
                    <dl>
                      <dt><b>Examples:</b></dt>
                      <dd>
						<p>
                        <pre class="prettyprint lang-java">
String[] names = people.name.getAll();
Person firstJohn = people.name.findFirst("John");
PeopleView hiredYoung = people.hired.equals(true).age.between(20, 30).findAll();
                        </pre>
						</p>
                      </dd>
                    </dl>
                </dd></dl>
                
#elseif($class == "query")

#@columns_html("boolean")
#bool_query_columns()
#end

#@columns_html("long")
#num_query_columns()
#end

#@columns_html("String")
#string_query_columns()
#end
					  
                    <dl>
                      <dt><b>Examples:</b></dt>
                      <dd>
						<p>
                        <pre class="prettyprint" lang-java>
PeopleView v = people.hired.equals(true).age.between(20, 30).findAll();
                        </pre>
						</p>
                      </dd>
                    </dl>
                </dd></dl>
#end
