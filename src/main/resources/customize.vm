############################ CUSTOMIZATION ##############################

#macro(file_header)
/* This file was automatically generated by TightDB. */

#end

#macro(indentation)    #end

############################### TABLE ###################################

#macro(table)
#java_header()
import com.tightdb.*;
import com.tightdb.lib.*;

/**
 * This class represents a TightDB table and was automatically generated.
 */
#if($isNested)
public class ${entity}Table extends AbstractSubtable<${entity}, ${entity}View, ${entity}Query> {
#else
public class ${entity}Table extends AbstractTable<${entity}, ${entity}View, ${entity}Query> {
#end    

	public static final EntityTypes<${entity}Table, ${entity}View, ${entity}, ${entity}Query> TYPES = new EntityTypes<${entity}Table, ${entity}View, ${entity}, ${entity}Query>(${entity}Table.class, ${entity}View.class, ${entity}.class, ${entity}Query.class); 

#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
	public final ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}> ${f.name} = new ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}>(TYPES, table, ${f.code.attributes.index}, "${f.name}", ${f.code.attributes.subtable}.class);
#else
	public final ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query> ${f.name} = new ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query>(TYPES, table, ${f.code.attributes.index}, "${f.name}");
#end
#end

#if($isNested)
	public ${entity}Table(SubTableBase subTableBase) {
		super(TYPES, subTableBase);
#else
	public ${entity}Table() {
		super(TYPES);
#end    
	}

	@Override
	protected void specifyStructure(TableSpec spec) {
#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
        register${f.code.attributes.columnType}Column(spec, "${f.name}", new ${f.code.attributes.subtable}(null));
#else
        register${f.code.attributes.columnType}Column(spec, "${f.name}");
#end
#end
    }

#class_members()

}

#end

#macro(table_add)
try {
	int position = size();

#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
	insert${f.code.attributes.columnType}(${f.code.attributes.index}, position);
#else
	insert${f.code.attributes.columnType}(${f.code.attributes.index}, position, ${f.name});
#end
#end
	insertDone();

	return cursor(position);
} catch (Exception e) {
	throw addRowException(e);
}
#end

#macro(table_insert)
try {
#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
	insert${f.code.attributes.columnType}(${f.code.attributes.index}, position);
#else
	insert${f.code.attributes.columnType}(${f.code.attributes.index}, position, ${f.name});
#end
#end
	insertDone();

	return cursor(position);
} catch (Exception e) {
	throw insertRowException(e);
}

#end

################################ VIEW ###################################

#macro(view)
#java_header()
import com.tightdb.*;
import com.tightdb.lib.*;

/**
 * This class represents a TightDB view and was automatically generated.
 */
public class ${entity}View extends AbstractView<${entity}, ${entity}View> {

#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
	public final ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}> ${f.name} = new ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}>(${entity}Table.TYPES, rowset, ${f.code.attributes.index}, "${f.name}", ${f.code.attributes.subtable}.class);
#else
	public final ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query> ${f.name} = new ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query>(${entity}Table.TYPES, rowset, ${f.code.attributes.index}, "${f.name}");
#end
#end

	public ${entity}View(TableViewBase viewBase) {
		super(${entity}Table.TYPES, viewBase);
	}

}
#end

############################### QUERY ###################################

#macro(query)
#java_header()
import com.tightdb.*;
import com.tightdb.lib.*;

/**
 * This class represents a TightDB query and was automatically generated.
 */
public class ${entity}Query extends AbstractQuery<${entity}, ${entity}View> {

#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
    public final ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}> ${f.name};
#else
    public final ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query> ${f.name};
#end
#end

	public ${entity}Query(TableBase table, TableQuery query) {
		super(${entity}Table.TYPES, table, query);
#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
        ${f.name} = new ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}>(${entity}Table.TYPES, table, query, ${f.code.attributes.index}, "${f.name}", ${f.code.attributes.subtable}.class);
#else
        ${f.name} = new ${f.code.attributes.columnType}RowsetColumn<${entity}, ${entity}Query>(${entity}Table.TYPES, table, query, ${f.code.attributes.index}, "${f.name}");
#end
#end
	}

}
#end

############################### CURSOR ##################################

#macro(cursor)
#java_header()
import com.tightdb.*;
import com.tightdb.lib.*;

/**
 * This class represents a TightDB cursor and was automatically generated.
 */
public class ${entity} extends AbstractCursor<${entity}> {

#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
    public final ${f.code.attributes.columnType}CursorColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}> ${f.name};
#else
    public final ${f.code.attributes.columnType}CursorColumn<${entity}, ${entity}Query> ${f.name};
#end
#end

	public ${entity}(IRowsetBase rowset, long position) {
		super(${entity}Table.TYPES, rowset, position);

#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
        ${f.name} = new ${f.code.attributes.columnType}CursorColumn<${entity}, ${entity}Query, ${f.code.attributes.subtable}>(${entity}Table.TYPES, this, ${f.code.attributes.index}, "${f.name}", ${f.code.attributes.subtable}.class);
#else
        ${f.name} = new ${f.code.attributes.columnType}CursorColumn<${entity}, ${entity}Query>(${entity}Table.TYPES, this, ${f.code.attributes.index}, "${f.name}");
#end
#end
	}

#foreach($f in $columns)
#if($f.code.attributes.isSubtable)
	public ${f.code.attributes.subtable} get${f.name.capitalized}() {
#else
	public ${f.type.canonicalName} get${f.name.capitalized}() {
#end
		return this.${f.name}.get();
	}

#if($f.code.attributes.isSubtable)
	public void set${f.name.capitalized}(${f.code.attributes.subtable} ${f.name}) {
#else
	public void set${f.name.capitalized}(${f.type.canonicalName} ${f.name}) {
#end
		this.${f.name}.set(${f.name});
	}

#end
	@Override
	public AbstractColumn<?, ?, ?>[] columns() {
		return getColumnsArray(#list($columns, '${it.name}', ', '));
	}

}
#end

################################ UTILS ###################################

#macro(list $items $template $separator)
#foreach($it in $items)
#evaluate($template)#if($foreach.hasNext)$separator#end
#end
#end
