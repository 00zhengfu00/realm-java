<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<link href="css.css" rel="stylesheet" type="text/css">
		<link href="main.css" media="screen" rel="stylesheet" type="text/css">

	<!--[if lt IE 8]>
		<link rel="stylesheet" type="text/css" href="/stylesheets/ie7.css" />
	<![endif]-->


	<link href="prettify.css" type="text/css" rel="stylesheet" />
	<script type="text/javascript" src="prettify.js"></script>

		<script type="text/javascript">
var App = {};
		</script>
		<script src="main.js" type="text/javascript">
</script>
		<title>TightDB Java Reference</title>


		<style type="text/css">
        
        strong, b {
        font-weight: bolder;
        }
        
        i {
            font-style: italic;
        }
        
        dl {
        display: block;
        -webkit-margin-before: 1em;
        -webkit-margin-after: 1em;
        -webkit-margin-start: 0px;
        -webkit-margin-end: 0px;
        }
        
        dd {
        display: block;
        -webkit-margin-start: 40px;
        }
        
        dt {
        display: block;
        }
        
        pre, xmp, plaintext, listing {
        font-family: monospace;
        white-space: pre;
        }
        
        p {
        display: block;
        -webkit-margin-before: 1em;
        -webkit-margin-after: 1em;
        -webkit-margin-start: 0px;
        -webkit-margin-end: 0px;
        }

		.main {
		color: #0067AB;
		font-family: 'Open Sans','Helvetica Neue',Helvetica;
		}

		h1, h2, h3, h4, h5 {
		color: #0067AB;
		font-family: 'Open Sans','Helvetica Neue',Helvetica;
		}

		.p_docs h1 h2 h3 h4 {
		margin-bottom: 25px;
		-moz-border-radius: 3px;
		-webkit-border-radius: 3px;
		-o-border-radius: 3px;
		-ms-border-radius: 3px;
		-khtml-border-radius: 3px;
		border-radius: 3px;
		margin-top: 35px;
		border-bottom: 1px solid #CBE3F3;
		background: #E0EEF8;
		padding: 10px;
		color: #0067AB;
		font-size: 22px;
		}

		.code {
		background: #E0EEF8;
		border: 1px solid #B6D7EF;
		padding: 15px;
		font-size: 13px;
		line-height: 19px;
		font-family: "Monaco","Courier New",Courier;
		margin-bottom: 25px;
		}

		.header {
		background: #E0EEF8;
		border: 1px solid #E0EEF8;
		padding: 5px;
		font-size: 13px;
		line-height: 3px;
		font-family: "Monaco","Courier New",Courier;
		margin-bottom: 25px;
		color: #0067AB;
		}
		
	.eks {
	    border: 1px solid #CBE3F3;
	    border-radius: 5px 5px 5px 5px;
	    font-size: 14px;
	    padding: 15px;
	}

		</style>

<script type="text/javascript">

  var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-23135871-1']);
      _gaq.push(['_setDomainName', '.tightdb.com']);
        _gaq.push(['_trackPageview']);

  (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
              var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                })();

</script>


	</head>
		<body class="p_docs p_docs_ios_guide" onload="prettyPrint()">


		<div>
		<a href="../index.html"><img src=logo200.png></a>
		</div>

		<div class="main" style="width: 800px; margin: 0px auto -1px;">




		<div class="container">
			<div class="right_col_container">
				<div class="right_col">
					<div class="box">
						<ul>
							<li data-section="table" class="major">
								<strong class="first"><a class="" href="#table">Table Class</a></strong>
							</li>

                            <li data-section="tablecursor" class="major">
							  <strong class="first"><a class="" href="#tablecursor">Row Class</a></strong>
                            </li>

							<li data-section="tablequery" class="major">
								<strong class="first"><a class="" href="#tablequery">Query Class</a></strong>                                <ul style="display: block;">
                            </li>

                            <li data-section="tableview" class="major">
                                <strong class="first"><a class="" href="#tableview">View Class</a></strong>
								<!--
                                <ul style="display: block;">
                                   <li><a href="#tableview-clear">clear</a></li>
                                   <li><a href="#tableview-deleterow">remove</a></li>
                                   <li><a href="#tableview-isempty">isEmpty</a></li>
                                   <li><a href="#tableview-count">count</a></li>
                                </ul>
								-->
                            </li>

							<li data-section="group" class="major">
								<strong class="first"><a class="" href="#group">Group Class</a></strong>
								<!--
								<ul style="display: block;">
									<li><a href="#group-constructor">constructor</a></li>
									<li><a href="#group-has_table">hasTable</a></li>
									<li><a href="#group-get_table">getTable</a></li>
									<li><a href="#group-write_to_file">writeToFile</a></li>
									<li><a href="#group-write_to_mem">writeToMem</a></li>
								</ul>
								-->
							</li>
						</ul>
					</div>
				</div>
			</div>
			<div class="left_col">
				
				<h1>TightDB Java Reference</h1>

                <p>
                This reference manual documents the high-level Java interface to TightDB. The high-level
                interface is suited for general application development. The low-level
                interface is documented elsewhere.
                </p> 

                <p>
                In this reference manual, a cell means a specific column at a specific row.
                </p>

<!--- TABLE CLASS --->

                <a href="#" name="table" id="table"></a>
                <a href="#" class="section section_minor" name="table_anchor" id="table_anchor"></a>
                <h2>Table Class</h2>
                <p>
                The Table class allows you to efficiently work with data in terms of rows and columns.
                </p>
                <p>
				<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
				<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
				<th align="left" colspan="2"><font size="+2">
				<b>Constructor Summary</b></font></th>
				</tr>
				<tr bgcolor="white" class="TableRowColor">
				<td><code><b><a href="#table-constructor"><i>Table</i></a></b>()</code>

				<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Instantiates a TightDB table</td>
				</tr>
				</tbody></table>

				</p>
				</p>

				<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
				<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
				<th align="left" colspan="2"><font size="+2">
				<b>Method Summary</b></font></th>
				</tr>

${table_method_overview}

				</tbody></table>
                <br>
                
                <h3>Constructor Detail</h3>

                <a href="#" name="table-constructor" id="table-constructor"></a>
				<a href="#" class="section section_major" name="table-constructor_anchor" id="table-constructor_anchor"></a>
				<h4>constructor</h4>
                <dl><dd>
	                <p><div class="eks">
	                <pre class="prettyprint" lang-java style="font-size: 16px">new <b>Table</b>()</pre>
	                </div>
	                </p>
                	Allocates and instantiates a TightDB table.
                	<p>
	                <i>Note</i>: Only tables which are part of a <a href="#group">Group</a> can be serialized to memory or disk.
                	</p>
                    <p>
                      <i>Note</i>: Tables should be allocated and instantiated using the <code>@Table</code> annotation. 
                      The annotation for a Java class with name <code>foo</code> will 
                      generate a number of classes representing rows (<code>Foo</code>), queries (<code>FooQuery</code>),
                      result sets (<code>FooView</code>), and the table (<code>FooTable</code>). 
                    </p>
                	<dl>
                		<dt><b>Parameters:</b></dt>
                		<dd>
	                        <p>
                              None
                             </p>
                        </dd>
                	</dl>
                	<dl>
                		<dt><b>Returns:</b></dt>
                		<dd>
	                        <p>
		                    Table object
                            </p>
                        </dd>
                	</dl>
                	<dl>
                		<dt><b>Example:</b></dt>
                		<dd>
							<pre class="prettyprint" lang-java>
public class Example {

    @Table
    class person {
        String name;
        int age;
        boolean hired;
    }

// PersonTable, Person, PersonQuery, and PersonView are generated

    public static void main(String[] args) {
        PersonTable people = new PersonTable();
        // ...
    }
}
							</pre>
                         </dd>
                	</dl>
                </dd></dl>

                <h3>Method Detail</h3>

${table_method_details}


<!--- QUERY CLASS --->


                <a href="#" name="tablequery" id="tablequery"></a>
                <a href="#" class="section section_minor" name="tablequery_anchor" id="tablequery_anchor"></a>
                <h2>Query Class</h2>
                <p>
                <code>Query</code> objects are used to build-up queries. The class is generated by
                the <code>@Table</code> annotation.
                </p>

				<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
				<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
				<th align="left" colspan="2"><font size="+2">
				<b>Constructor Summary</b></font></th>
				</tr>
				<tr bgcolor="white" class="TableRowColor">
				<td><code><b><a href="#tablequery">Query</a></b> query</code>

				<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query class.</td>
				</tr>
				</tbody></table>
				
                <p></p>

				<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
				<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
				<th align="left" colspan="2"><font size="+2">
				<b>Method Summary</b></font></th>
				</tr>

${query_method_overview}

				</tbody></table>
                <br>
			
                <a href="#" name="table-query" id="table-query"></a>
                <a href="#" class="section section_major" name="table-query_anchor" id="table-query_anchor"></a>
                <h3>where</h3>
                <p><div class="eks">
                    <pre class="prettyprint" lang-java style="font-size: 16px"><i>Table</i>Query <i>Table</i>.<b>where</b>()</pre>
                  </div>
                </p>
                <dl><dd>
                    <p>
                      Create a query object for a table.
                    </p>
                    <dl>
                      <dt><b>Parameters:</b></dt>
                      <dd><p>N/A</p></dd>
                    </dl>
                    <dl>
                      <dt><b>Returns:</b></dt>
                      <dd><p><code><i>Table</i>Query</code>: Query object</p></dd>
                    </dl>
                    <dl>
                      <dt><b>Query interface:</b></dt>
                      <dd><p>Query objects are created by and associated with table objects. Query is build using a <a href="http://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a> (method invocations can be daisy chained). Conditions are by default folded using logical-and. Query objects can be reused, and queries can be repeatly executed by the <tt>find_all()</tt> method (resembles the prepare/execute pattern in SQL clients).<p> The table shows the declared methods on TableQuery objects.</p></dd>

                      <dd><p>For boolean columns:</p></dd>
                      <dd><p><table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
                        	<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
                              <th>Method</th><th>Description</th></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>equals</b>(boolean value)</tt></td><td>equal to</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>notEquals</b>(boolean value)</tt></td><td>not equal to</td></tr>
                            </tbody>
                          </table>
                        </p>
                      </dd>

                      <dd<p>For integer columns:</p></dd>
                      <dd><p><table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
                        	<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
                              <th>Method</th><th>Description</th></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>equals</b>(long value)</tt></td><td>equal to</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>notEquals</b>(long value)</tt></td><td>not equal to</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>greater</b>(long value)</tt></td><td>greater than</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>greaterEqual</b>(long value)</tt></td><td>greater than or equal to</td></tr>                             
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>lessThan</b>(long value)</tt></td><td>less than</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>lessThanEqualTo</b>(long value)</tt></td><td>less than or equal to</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>between</b>(long value_1, long value_2)</tt></td><td>belongs to interval between <tt>value_1</tt> and <tt>value_2</tt></td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt>long <b>sum()</b></tt></td><td>calculate the sum the values of a specific column</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt>double <b>average()</b></tt></td><td>calculate the average of a specific column</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt>long <b>minimum()</b></tt></td><td>find mininal value of a specific attribute</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt>long <b>maximum()</b></tt></td><td>find the maximal value of a specific attribute</td></tr>
                            </tbody>
                          </table>
                        </p>
                      </dd>

                      <dd><p>For string columns:</p></dd>
                      <dd><p><table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
                        	<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
                              <th>Method</th><th>Description</th></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>equals</b>(String value, boolean caseSensitive)</tt><td>equal to</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>notEquals</b>(String value, boolean caseSensitive)</tt></td><td>not equal to</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>contains</b>(String value, boolean caseSensitive)</tt></td><td>substring search</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>beginsWith</b>(String value, boolean caseSensitive)</tt></td><td>substring match at the begining of the attribute</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>endsWith</b>(String value, boolean caseSensitive)</tt></td><td>substring match at the end at the attribute</td></tr>
                            </tbody>
                          </table>
                      </p></dd>

                      <dd><p>Other methods:</p></dd>
                      <dd><p><table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
                        	<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
                              <th>Method</th><th>Description</th></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>startGroup</b>()</tt></td><td><a href="#tablequery-group">begin</a> condition group ("left" parenthesis)</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>endGroup</b>()</tt></td><td><a href="#tablequery-endgroup">end</a> condition group ("right" parenthesis)</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><b>or</b>()</tt></td><td><a href="#tablequery-or">logical-or</a></td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt><i>Table</i>View <b>findAll</b>()</tt></td><td><a href="#tablequery-do">execute</a> a query</td></tr>
                              <tr bgcolor="white" class="TableRowColor"><td><tt>long <b>count</b>()</tt></td><td><a href="#tablequery-count">count</a> the number of rows</td></tr>
                            </tbody>
                          </table>
                      </p></dd>

                    </dl>
                    <dl>
                      <dt><b>Examples:</b></dt>
                      <dd>
                        <pre class="prettyprint" lang-java>
PeopleView v = people.hired.equals(true).age.between(20, 30).findAll();
                        </pre>
                      </dd>
                    </dl>
                </dd></dl>

${query_method_details}


<!--- TABLEVIEW CLASS --->

                <a href="#" name="tableview" id="tableview"></a>
                <a href="#" class="section section_minor" name="tableview_anchor" id="tableview_anchor"></a>
                <h2>View Class</h2>
                <p>
                The <code>findAll</code> in the <code>Query</code> class returns a <code>View</code> object. You can interact with the TableView just as a regular table, and all changes to it will propagate to the original <a href="#table">table</a>.
                </p>

				<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
				<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
				<th align="left" colspan="2"><font size="+2">
				<b>Constructor Summary</b></font></th>
				</tr>
				<tr bgcolor="white" class="TableRowColor">
				<td><code><b><a href="#tableview"><i>Table</i>View</a></b> <i>Table</i>Query.findAll()</code>

				<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TableView class.</td>
				</tr>
				</tbody></table>

                <table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
                <tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
                <th align="left" colspan="2"><font size="+2">
                <b>Method Summary</b></font></th>
                </tr>
                
${view_method_overview}

				</tbody></table>
                <br>

${view_method_details}

<!--- GROUP CLASS --->

                <a href="#" name="group" id="group"></a>
                <a href="#" class="section section_minor" name="group_anchor" id="group_anchor"></a>
                <h2>Group Class</h2>
                <p>
                The <code>Group</code> is a container for <a href="#table">tables</a> and it allows the tables to be serialized to disk and memory.
                </p>
				<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
				<tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
				<th align="left" colspan="2"><font size="+2">
				<b>Constructor Summary</b></font></th>
				</tr>
				<tr bgcolor="white" class="TableRowColor">
				<td><code><b><a href="#group">Group</a></b>()</code>

				<br>
				&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Group class.</td>
				</tr>
				</tbody></table>

				</p>
				</p>

                <table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
                <tbody><tr bgcolor="#CCCCFF" class="TableHeadingColor">
                <th align="left" colspan="2"><font size="+2">
                <b>Method Summary</b></font></th>
                </tr>
                
                <tr bgcolor="white" class="TableRowColor">
                <td align="right" valign="top" width="1%"><font size="-1">
                <code>&nbsp;void</code></font></td>
                <td><code><b><a href="#group-create_table">getTable</a></b>()</code>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a table</td>
                </tr>

                <tr bgcolor="white" class="TableRowColor">
                <td align="right" valign="top" width="1%"><font size="-1">
                <code>&nbsp;bool</code></font></td>
                <td><code><b><a href="#group-has_table">hasTable</a></b>()</code>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check if group has a specific named table</td>
                </tr>
                
                
                <tr bgcolor="white" class="TableRowColor">
                <td align="right" valign="top" width="1%"><font size="-1">
                <code>&nbsp;void</code></font></td>
                <td><code><b><a href="#group-write_to_file">writeToFile</a></b>()</code>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write table group to disk</td>
                </tr>
                
                <tr bgcolor="white" class="TableRowColor">
                <td align="right" valign="top" width="1%"><font size="-1">
                <code>&nbsp;byte[]</code></font></td>
                <td><code><b><a href="#group-write_to_mem">writeToMem</a></b>()</code>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write table group to memory buffer</td>
                </tr>
                </tbody></table>
                <br>
                
                <h3>Constructor Detail</h3>

                <a href="#" name="group-constructor" id="group-constructor"></a>
				<a href="#" class="section section_minor" name="group-constructor_anchor" id="group-constructor_anchor"></a>
				<h4>constructor</h4>
                <p><div class="eks">
                <pre class="prettyprint" lang-java style="font-size: 16px"><b>Group</b> group;</pre>
            </div>
            </p>
                <dl><dd>
                	<p>
                	Creates a table group.
                	</p>
                	<dl>
                		<dt><b>Parameters:</b></dt>
                		<dd><p></p>
	                    </dd>
                	</dl>
                    <dl>
                        <dt><b>Returns:</b></dt>
                        <dd><p>A group object</p></dd>
                    </dl>
                	<dl>
                		<dt><b>Example:</b></dt>
                		<dd>
							<pre class="prettyprint" lang-java>
// Coming to a browser near you
							</pre>
                         </dd>
                	</dl>
                </dd></dl>

                <h3>Method Detail</h3>

           			<a href="#" name="group-load" id="group-load"></a>
					<a href="#" class="section section_minor" name="group-load_anchor" id="group-load_anchor"></a>
					<h4>load()</h4>
	                <p><div class="eks">
	                <pre class="prettyprint" lang-java style="font-size: 16px">Group <b>load</b>(File file)</pre>
	            </div>
	            </p>
	                <dl><dd>
	                	<p>
	                		Load a group from disk.
	                	</p>
	                	<dl>
	                		<dt><b>Parameters:</b></dt>
	                		<dd><p><code>file</code>: file handler</p></dd>
	                	</dl>
	                	<dl>
	                		<dt><b>Returns:</b></dt>
	                		<dd><p><code>Group</code> a group object</p></dd>
	                	</dl>
	                	<dl>
	                		<dt><b>Example:</b></dt>
	                		<dd>
								<pre class="prettyprint" lang-java>
Group group = new Group();
File file = new File("people.tightdb");
group.load(file);
								</pre>
	                         </dd>
	                	</dl>
	                </dd></dl>



           			<a href="#" name="group-has_table" id="group-has_table"></a>
					<a href="#" class="section section_minor" name="group-has_table_anchor" id="group-has_table_anchor"></a>
					<h4>hasTable()</h4>
	                <p><div class="eks">
	                <pre class="prettyprint" lang-java style="font-size: 16px">boolean <b>hasTable</b>(String table_name)</pre>
	            </div>
	            </p>
	                <dl><dd>
	                	<p>
	                		Check if group contains a specific named table.
	                	</p>
	                	<dl>
	                		<dt><b>Parameters:</b></dt>
	                		<dd><p><code>String table_name</code>: Name of the table you wish to look for</p></dd>
	                	</dl>
	                	<dl>
	                		<dt><b>Returns:</b></dt>
	                		<dd><p><code>true</code> if the table exists, otherwise <code>false</code>.</p></dd>
	                	</dl>
	                	<dl>
	                		<dt><b>Example:</b></dt>
	                		<dd>
								<pre class="prettyprint" lang-java>
if (group.hasTable("my great table")) {
  ...
}
								</pre>
	                         </dd>
	                	</dl>
	                </dd></dl>
		

				<a href="#" name="group-get_table" id="group-get_table"></a>
				<a href="#" class="section section_minor" name="group-get_table_anchor" id="group-get_table_anchor"></a>
				<h4>getTable</h4>
                <p><div class="eks">
                <pre class="prettyprint" lang-java style="font-size: 16px"><i>Table</i> <b>getTable</b>(String name)</pre>
            </div>
            </p>
                <dl><dd>
                	<p>
                		Create a specific table from a group.
                	</p>
                	<dl>
                		<dt><b>Parameters:</b></dt>
                		<dd><p><code>name</code>: table name
                        </dd>
                	</dl>
                	<dl>
                		<dt><b>Return:</b></dt>
                		<dd><p>A table object</p></dd>
                	</dl>
                	<dl>
                		<dt><b>Example:</b></dt>
                		<dd>
							<pre class="prettyprint" lang-java>
PeopleTable table = group.getTable("My great table");
							</pre>
                         </dd>
                	</dl>
                </dd></dl>

				<a href="#" name="group-write_to_file" id="group-write_to_file"></a>
				<a href="#" class="section section_minor" name="group-write_to_file_anchor" id="group-write_to_file_anchor"></a>

				<h4>writeToFile</h4>
                <p><div class="eks">
                <pre class="prettyprint" lang-java style="font-size: 16px">void <b>writeToFile</b>(String name)</pre>
            </div>
            </p>
                <dl><dd>
                	<p>
                	Write table group to disk.
                	</p>
                	<dl>
                		<dt><b>Parameters:</b></dt>
                		<dd><p><code>name</code>: Filename of data file</p></dd>
                	</dl>
                	<dl>
                		<dt><b>Returns:</b></dt>
                		<dd><p>void</p></dd>
                	</dl>
                	<dl>
                		<dt><p><b>Example:</b></p></dt>
                		<dd>
							<pre class="prettyprint" lang-java>
group.writeToFile("employees.tightdb");
							</pre>
                         </dd>
                	</dl>
                </dd></dl>


				<a href="#" name="group-write_to_mem" id="group-write_to_mem"></a>
				<a href="#" class="section section_minor" name="group-write_to_mem_anchor" id="group-write_to_mem_anchor"></a>
				<h4>writeToMem</h4>
                <p><div class="eks">
                <pre class="prettyprint" lang-java style="font-size: 16px">byte[] <b>writeToMem</b>()</pre>
            </div>
            </p>
                <dl><dd>
                	<p>
                	Write table group to memory buffer.
                	</p>
                	<dl>
                		<dt><b>Parameters:</b></dt>
                		<dd><p>None</dd>
                	</dl>
                	<dl>
                		<dt><b>Returns:</b></dt>
                		<dd><p>byte array containing group in serialized form (this is binary data).
                	</dl>
                	<dl>
                		<dt><p><b>Example:</b></p></dt>
                		<dd>
							<pre class="prettyprint" lang-java>
// Write same group to memory buffer
byte buffer[] = group.writeToMem();
							</pre>
                         </dd>
                	</dl>
               </dd></dl>
			</div>
			
			
			<script type="text/javascript">
			$(document).ready(function() {
			new App.Views.Docs({ el: $("body"), accordian: true });
			});

			$(".toggled-code").each(function (index) {
			$(".code-container .code-section:first-child", this).show();
			$(".toggles .toggle-item:first-child", this).addClass("selected");

			$(".toggles .toggle-item a", this).click(function () {
			$(this).parent().siblings().removeClass("selected");
			$(this).parent().addClass("selected");

			var code_sections = $(this).parent().parent().parent().find(".code-container .code-section");
			code_sections.hide();

			var my_index = $(this).parent().index();
			$(code_sections[my_index]).show();

			return false;
			});
			});
			$(".question_tip").click(function(e) {
			return false;
			});

			// Initialize backbone history
			if(Backbone.history) Backbone.history.start();

			// Disable all buttons on click
			$('form').submit(function(e) {
			$(this).find("button").attr("disabled", "disabled").addClass("disabled");
			});

			</script>
		</div>
	</body>
</html>

