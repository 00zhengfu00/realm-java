/* This file was automatically generated by TightDB. */
package com.tightdb.test;

import com.tightdb.*;
import com.tightdb.lib.*;

/**
 * This class represents a TightDB table and was automatically generated.
 */
public class TestEmployeeTable extends AbstractTable<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> {
	public static final EntityTypes<TestEmployeeTable, TestEmployeeView, TestEmployeeRow, TestEmployeeQuery> TYPES = new EntityTypes<TestEmployeeTable, TestEmployeeView, TestEmployeeRow, TestEmployeeQuery>(TestEmployeeTable.class, TestEmployeeView.class, TestEmployeeRow.class, TestEmployeeQuery.class);

	public final StringRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> firstName = new StringRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery>(TYPES, table, 0, "firstName");
	public final StringRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> lastName = new StringRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery>(TYPES, table, 1, "lastName");
	public final LongRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> salary = new LongRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery>(TYPES, table, 2, "salary");
	public final BooleanRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> driver = new BooleanRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery>(TYPES, table, 3, "driver");
	public final BinaryRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> photo = new BinaryRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery>(TYPES, table, 4, "photo");
	public final DateRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> birthdate = new DateRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery>(TYPES, table, 5, "birthdate");
	public final MixedRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery> extra = new MixedRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery>(TYPES, table, 6, "extra");
	public final TableRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery, TestPhoneTable> phones = new TableRowsetColumn<TestEmployeeRow, TestEmployeeView, TestEmployeeQuery, TestPhoneTable>(TYPES, table, 7, "phones", TestPhoneTable.class);
	public TestEmployeeTable() {
		super(TYPES);
	}

	public TestEmployeeTable(Group group) {
		super(TYPES, group);
	}
	public static void specifyStructure(TableSpec spec) {
        addStringColumn(spec, "firstName");
        addStringColumn(spec, "lastName");
        addLongColumn(spec, "salary");
        addBooleanColumn(spec, "driver");
        addBinaryColumn(spec, "photo");
        addDateColumn(spec, "birthdate");
        addMixedColumn(spec, "extra");
        addTableColumn(spec, "phones", new TestPhoneTable(null));
    }

    public TestEmployeeRow add(java.lang.String firstName, java.lang.String lastName, int salary, boolean driver, byte[] photo, java.util.Date birthdate, java.lang.Object extra) {
        try {
            long position = size();

			insertString(0, position, firstName);
			insertString(1, position, lastName);
			insertLong(2, position, salary);
			insertBoolean(3, position, driver);
			insertBinary(4, position, photo);
			insertDate(5, position, birthdate);
			insertMixed(6, position, extra);
			insertTable(7, position);
		   insertDone();

            return cursor(position);
        } catch (Exception e) {
            throw addRowException(e);
        }
    }

    public TestEmployeeRow insert(long position, java.lang.String firstName, java.lang.String lastName, int salary, boolean driver, byte[] photo, java.util.Date birthdate, java.lang.Object extra) {
        try {
        	insertString(0, position, firstName);
        	insertString(1, position, lastName);
        	insertLong(2, position, salary);
        	insertBoolean(3, position, driver);
        	insertBinary(4, position, photo);
        	insertDate(5, position, birthdate);
        	insertMixed(6, position, extra);
        	insertTable(7, position);
           insertDone();

            return cursor(position);
        } catch (Exception e) {
            throw insertRowException(e);
        }
    }

}
