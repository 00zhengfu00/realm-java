package com.tightdb;

import java.util.Date;

/**
 * This class represents a view of a particular table. We can think
 * a tableview is a subset of a table. It contains less than and 
 * equal to the number of entries of a table. This class will serve as 
 * a base class of all table view. This is a raw level table view, users 
 * are not encouraged to use this class. Instead users are advised to use 
 * the generated subclass version of the table.
 * 
 * Lets assume we are going to keep track of a table to store the employees 
 * of a company or an organization.
 * 
 * Following is a small example how to use the autogenerated class of the 
 * tableview. For that purpose we will first define the spec of an employee 
 * entity
 * 
 * 	@Entity
 *	public class Employee_Spec {
 *		String name;
 *		long age;
 *		boolean hired;
 *		byte[] imageData;
 *	}
 * 
 * now once this spec class is compiled along with tightdb annotation processor
 * this will produce following classes.
 * 
 * 1. Employee
 * 2. EmployeeTable
 * 3. EmployeeView.
 * 
 * In this class context our interest is EmployeeView which will be inherited from
 * this class.
 * 
 * The generated class will have more specialized method to do operations on TableView.
 * 
 * @author Anirban Talukdar
 *
 */
public class TableViewBase {
	/**
	 * Creates a TableViewBase for the TableBase table. The constructor
	 * implicitly create the native object tableview which is the backbone
	 * of this class.
	 * 
	 * @param table
	 */
	public TableViewBase(TableBase table){
		this.table = table;
		this.tableView = null;
		this.nativePtr = createNativeTableView(this.table);
	}
	
	/**
	 * Creates a TableViewBase with a Java Object Table and a already created
	 * native reference to a TableView. This method is not supposed to be 
	 * called by a user of this db. It is for internal use only.
	 * 
	 * @param table
	 * @param nativePtr
	 */
	protected TableViewBase(TableBase table, long nativePtr){
		this.table = table;
		this.tableView = null;
		this.nativePtr = nativePtr;
	}
	
	/**
	 * Creates a TableView with already created Java TableView Object and a 
	 * native native TableView object reference. This method is not supposed to
	 * be called by the user of the db. This method is for internal use only.
	 * 
	 * @param tableView
	 * @param nativePtr
	 */
	public TableViewBase(TableViewBase tableView, long nativePtr){
		this.table = null;
		this.tableView = tableView;
		this.nativePtr = nativePtr;
	}
	
	public void clear(){
		nativeClear();
	}
	
	protected native void nativeClear();

	/**
	 * Returns the number of entries of the tableview.
	 * @return
	 */
	public int getCount(){
		return nativeGetCount();
	}

	protected native int nativeGetCount();
	
	/**
	 * checks whether the table is empty or not.
	 * @return
	 */
	public boolean isEmpty(){
		return getCount() != 0;
	}
	
	/**
	 * Removes a particular row identified by the index from the tableview.
	 * [citation needed] The corresponding row of the table also get deleted 
	 * for which the tableview is part of.
	 * 
	 * @param index
	 */
	public void removeRow(int index){
		nativeRemoveRow(index);
	}
	
	protected native void nativeRemoveRow(int index);
	
	/**
	 * Get the long value of a cell of the tableview identified by the
	 * columnIndex and rowIndex. 
	 * @param columnIndex
	 * @param rowIndex
	 * @return
	 */
	public long getLong(int columnIndex, int rowIndex){
		return nativeGetLong(columnIndex, rowIndex);
	}
	
	protected native long nativeGetLong(int columnIndex, int rowIndex);
	
	/**
	 * Get the boolean value of a cell of the table identified by the 
	 * columnIndex and rowIndex.
	 * 
	 * @param columnIndex
	 * @param rowIndex
	 * @return
	 */
	public boolean getBoolean(int columnIndex, int rowIndex){
		return nativeGetBoolean(columnIndex, rowIndex);
	}
	
	protected native boolean nativeGetBoolean(int columnIndex, int rowIndex);
	
	/**
	 * Gets the string value of a cell identified by the columnIndex and rowIndex
	 * of the cell.
	 * 
	 * @param columnIndex
	 * @param rowIndex
	 * @return
	 */
	public String getString(int columnIndex, int rowIndex){
		return nativeGetString(columnIndex, rowIndex);
	}
	
	protected native String nativeGetString(int columnInde, int rowIndex);
	
	/**
	 * Returns the Date value (java.util.Date) for a particular cell specified 
	 * by the columnIndex and rowIndex of the cell.
	 * 
	 * @param columnIndex
	 * @param rowIndex
	 * @return
	 */
	public Date getDate(int columnIndex, int rowIndex){
		throw new UnsupportedOperationException();
	}
	
	/** 
	 * Returns the binary byte[] data for a cell identified by the columnIndex 
	 * and rowIndex of that cell.
	 * 
	 * @param columnIndex
	 * @param rowIndex
	 * @return
	 */
	public byte[] getBinaryData(int columnIndex, int rowIndex){
		return nativeGetBinaryData(columnIndex, rowIndex);
	}
	
	protected native byte[] nativeGetBinaryData(int columnIndex, int rowIndex);
	
	public Mixed getMixed(int columnIndex, int rowIndex, Mixed value){
		return nativeGetMixed(columnIndex, rowIndex, value);
	}
	
	protected native Mixed nativeGetMixed(int columnIndex, int rowIndex, Mixed value);
	
	public SubTableBase getSubTable(int columnIndex, int rowIndex){
		return new SubTableBase(nativeGetSubTable(columnIndex, rowIndex));
	}
	
	protected native long nativeGetSubTable(int columnIndex, int rowIndex);
	
	/**
	 * Sets the long value for a particular cell identified by columnIndex
	 * and rowIndex of that cell.
	 * 
	 * @param columnIndex
	 * @param rowIndex
	 * @param value
	 */
	public void setLong(int columnIndex, int rowIndex, long value){
		nativeSetLong(columnIndex, rowIndex, value);
	}
	
	protected native void nativeSetLong(int columnIndex, int rowIndex, long value);
	
	/**
	 * Sets the boolean value of a cell identified by the columnIndex and 
	 * the rowIndex of that cell.
	 * 
	 * @param columnIndex
	 * @param rowIndex
	 * @param value
	 */
	public void setBoolean(int columnIndex, int rowIndex, boolean value){
		nativeSetBoolean(columnIndex, rowIndex, value);
	}
	
	protected native void nativeSetBoolean(int columnIndex, int rowIndex, boolean value);
	
	/**
	 * Sets the string value of a particular cell of the tableView identified by 
	 * the columnIndex and the rowIndex of this tableView
	 * @param columnIndex
	 * @param rowIndex
	 * @param value
	 */
	public void setString(int columnIndex, int rowIndex, String value){
		nativeSetString(columnIndex, rowIndex, value);
	}
	
	protected native void nativeSetString(int columnIndex, int rowIndex, String value);

	/**
	 * Sets the binary value byte[] for a particular cell identified by the
	 * rowIndex and columnIndex of the cell.
	 * 
	 * @param columnIndex
	 * @param rowIndex
	 * @param data
	 */
	public void setBinaryData(int columnIndex, int rowIndex, byte[] data){
		nativeSetBinaryData(columnIndex, rowIndex, data);
	}
	
	protected native void nativeSetBinaryData(int columnIndex, int rowIndex, byte[] data);

	public void setMixed(int columnIndex, int rowIndex, Mixed data){
		nativeSetMixed(columnIndex, rowIndex, data);
	}
	
	protected native void nativeSetMixed(int columnIndex, int rowIndex, Mixed value);
	
	/** 
	 * Returns the summation of the values of a particular column of this 
	 * tableview. The column is identified by the columnIndex and rowIndex.
	 * 
	 * Note that: the type of the column marked by the columnIndex has to be of
	 * type ColumnType.ColumnTypeInt for obvious reason.
	 * 
	 * @param columnIndex
	 * @return
	 */
	public long sum(int columnIndex){
		return nativeSum(columnIndex);
	}
	
	protected native long nativeSum(int columnIndex);
	
	/** 
	 * Returns the maximum value of the cells of a column identified by the columnIndex.
	 * 
	 * Note that: for this method to work the Type of the column 
	 * identified by the columnIndex has to be ColumnType.ColumnTypeInt.
	 * 
	 * @param columnIndex
	 * @return
	 */
	public long max(int columnIndex){
		return nativeMax(columnIndex);
	}
	
	protected native long nativeMax(int columnIndex);
	
	/** 
	 * Returns the minimum value of the cells of a column identified by 
	 * the columnIndex.
	 * 
	 * Note that: for this method to work the Type of the column 
	 * identified by the columnIndex has to be ColumnType.ColumnTypeInt.
	 * 
	 * @param columnIndex
	 * @return
	 */
	public long min(int columnIndex){
		return nativeMin(columnIndex);
	}
	
	protected native long nativeMin(int columnIndex);
	
	protected native long createNativeTableView(TableBase table);
	
	protected TableBase getRootTable(){
		if(table != null)
			return table;
		return tableView.getRootTable();
	}
	
	protected long nativePtr;
	protected TableBase table;
	protected TableViewBase tableView;
}
