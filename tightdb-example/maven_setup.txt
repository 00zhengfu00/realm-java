Instructions for setting up TightDB for a new or existing project using Maven
=============================================================================

1. Create a new Maven project (or skip this step if you have an existing project).
 
2. Copy the native TightDB library to the project's "lib" folder (<project>/lib).
- Note: create the "lib" folder if it doesn't exist in the project root.

3. Copy tightdb.jar to the project's "lib" folder (<project>/lib/tightdb.jar).

4. Add the TightDB JAR as a Maven dependency (in <dependencies> ... </dependencies>) in pom.xml:

<dependency>
	<groupId>com.tightdb</groupId>
	<artifactId>tightdb</artifactId>
	<version>1.1.0</version>
	<scope>system</scope>
	<systemPath>${project.basedir}/lib/tightdb.jar</systemPath>
</dependency>

5. Configure Java compiler (to version 1.6 or 1.7) and JAnnocessor (in <build> <plugins> ... </plugins> </build>):

<plugin>
	<artifactId>maven-compiler-plugin</artifactId>
	<version>2.3.2</version>
	<configuration>
		<source>1.6</source>
		<target>1.6</target>
	</configuration>
</plugin>

<plugin>
	<groupId>com.googlecode.jannocessor</groupId>
	<artifactId>jannocessor-maven-plugin</artifactId>
	<version>0.7.4</version>
	<executions>
		<execution>
			<id>generate-code</id>
			<phase>generate-sources</phase>
			<goals>
				<goal>process</goal>
			</goals>
		</execution>
	</executions>
</plugin>

6. [Optional] In Eclipse 3.7 some "lifecycle connectors" errors might show up, so this additional configuration might be needed (in <build> <pluginManagement> <plugins> ... </plugins> </pluginManagement> </build>):
- Note: Such errors are not critical and they won't affect the build behavior, but it's recommended to solve them.

<plugin>
	<groupId>org.eclipse.m2e</groupId>
	<artifactId>lifecycle-mapping</artifactId>
	<version>1.0.0</version>
	<configuration>
		<lifecycleMappingMetadata>
			<pluginExecutions>
				<pluginExecution>
					<pluginExecutionFilter>
						<groupId>com.googlecode.jannocessor</groupId>
						<artifactId>jannocessor-maven-plugin</artifactId>
						<versionRange>[0.7.0,)</versionRange>
						<goals>
							<goal>process</goal>
						</goals>
					</pluginExecutionFilter>
					<action>
						<ignore />
					</action>
				</pluginExecution>
			</pluginExecutions>
		</lifecycleMappingMetadata>
	</configuration>
</plugin>

7. Executing "mvn generate-sources" will generate the source files (overwriting the previously generated files).
- Note: in Eclipse, you can run it by right-clicking the project -> Run As -> Maven generate-sources.
