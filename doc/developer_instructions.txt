

How to build tightdb-jni (on Windows):
======================================

1. Build tightdb
	- Build tightdb as lib (currently with "#define MULTITHREAD 0" in Query.cpp)
	- Use "Batch Build" which builds all 4 versions, a debug and a release version for x32 and x64.
	
2. Build JNI dll's
	- Copy above tightdbXXX.lib to tightdb_jni/native/libs/
	- Update any .hpp files in /tightdb_jni/native/src to be identical to the ones in tightdb above
	- If any changes are made in the JNI interface, bump up the TIGHTDB_JNI_VERSION in com_tightdb_util.cpp
	- Use "Batch Build" to build all 4 dll versions. The dll's will be located in the base directory
	

3. Copy dll's to example
	-copy target/{"tightdb_jni32.dll", "tightdb_jni64.dll", "libtightdb-jni.so", "libtightdb.jnilib"} to example/lib



How to setup Eclipse:
=====================
1. Create workspace for Eclipse (alternatively, you can skip this step and use some existing workspace).
   a) Create "workspace" directory (outside the "tightdb_java2" folder)
   b) Open Eclipse
   c) Point workspace to the newly created directory "workspace"

4. Import "tightdb_java2".
   a) In Eclipse click on File -> Import
   b) Select "Existing Maven projects" as an import source
   c) Select the "tightdb_java2" folder as root directory
   d) You should see 1 item in the projects list (e.g. /pom.xml - tightdb_java2...) with several sub-items, make sure they are all checked

5. Make sure the JDK6 (or JDK7) is installed and configured.
   a) Make sure you have JDK6 installed
   b) Make sure JDK6 is displayed on the list in Window -> Preferences -> Java -> Installed JREs.
      If it's not there, use the "Search" command on the same screen and navigate Eclipse to the folder where it was installed in
   c) Make sure the projects are configured to use the JDK6 by right-clicking them -> Properties -> (both Java Compiler and Java Build Path)

6. Build the jars (to produce tightdb.jar and tightdb-devkit.jar)
    - Right-click on tightdb_java2 -> Run as -> Maven install
   (the produced tightdb.jar file should be placed under tightdb-java-core/target)
   (the produced tightdb-devkit.jar file should be placed under tightdb-java-generator/target)

7. Configure tightdb-java-generator/target/tightdb-devkit.jar as annotation processor (to be used for automatic code generation).
   (do the following steps for the tightdb-java-example and tightdb-java-test projects:) 
	- Right-click on the project -> Properties
	- Go to Java Compiler -> Annotation processing and enable annotation processing (check all the 3 check-boxes).  
	- In Java Compiler -> Annotation processing the "Generated source directory" should be configured to be the same as the original sources directory (e.g. "src" or "src/main/java").
	- Note: later versions of TightDB will support placing the generated sources in arbitrary folder.  
	- Go to Java Compiler -> Annotation processing -> Factory Path, add tightdb-java-generator/target/tightdb-devkit.jar (click on Add JARs) and make sure it is checked.

8. If the previous step was done properly, Eclipse will start generating Java source code as soon as you annotate your schema specification classes with the @Table annotation.     


How to run Java tests:
======================
6. Execute the tests and examples.
   a) Execute the simple PoC "TableTest" (in the "com.tightdb" package) by right-clicking it -> Run As -> Java Application
   b) Execute the example "WorkingExample" (in the "com.tightdb.example" package) by right-clicking it -> Run As -> Java Application
   c) You can start playing with "WorkingExample", new code will be automatically generated by changing the annotated classes



How to update Java bindings:
============================
1. Update/add Java methods with "native" keyword added

2. Generate .h files 
	a) In Eclipse:

	b) javac has command to generate ...


How to update Java tightdb-jars:
================================

1. Update REQUIRED_JNI_VERSION version to match TIGHTDB_JNI_VERSION (if any interface changes)

2. Build jar:
	- Run as, Maven Build..., Goal: package
	(generated jar files are placed under Target)
	
3. copy target/tightdb*.jar to example/lib



