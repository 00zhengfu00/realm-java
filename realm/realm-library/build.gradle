apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        project.archivesBaseName = "realm-android"
    }
}

dependencies {
    compile 'com.intellij:annotations:+@jar'
    compile project(':realm-annotations')

    androidTestApt project(':realm-annotations-processor')
    androidTestApt project(':realm-annotations')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source android.sourceSets.main.java.srcDirs
    source "../realm-annotations/src/main/java"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.memberLevel = JavadocMemberLevel.PUBLIC
    exclude '**/internal/**'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

preBuild.dependsOn ':realm-jni:buildAndroidJni'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost${System.env.ANDROID_HOME}/extras/android/m2repository")
        }
    }
}

def siteUrl = 'https://github.com/realm/realm-java'
def gitUrl = 'https://github.com/realm/realm-java.git'

publishing {
    publications {
        realmLibrary(MavenPublication) {
            artifactId = 'realm-android'

            artifact file("${project.buildDir}/outputs/aar/realm-library-release.aar")
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-android')
                root.appendNode('description', 'Realm is a mobile database: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/realm/realm-java/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/realm/realm-java')
                scm.appendNode('connection', 'scm:git@github.com:realm/realm-java.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:realm/realm-java.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
        }
        defaults {
            publications 'realmLibrary'
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
    key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'

    dryRun = true
    publish = false

    publications = ['realmLibrary']
    pkg {
        repo = 'maven'
        name = 'realm-android'
        desc = 'Realm for Android'
        websiteUrl = siteUrl
        issueTrackerUrl = "${siteUrl}/issues"
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = ['aar', 'android', 'realm']
        publicDownloadNumbers = false
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Realm for Android'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

/*
artifacts {
    archives file("build/libs/realm-${version}.jar")
    archives androidSourcesJar
}

publishing {
    publications {
        mavenAndroid(MavenPublication) {
            groupId 'io.realm'
            artifactId 'realm-android'
            version version
            artifact assemble
            artifact androidSourcesJar {
                classifier "sources"
            }
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'realm-android')
                root.appendNode('description', 'Realm is a mobile database: a replacement for SQLite & ORMs.')
                root.appendNode('url', 'http://realm.io')

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/realm/realm-java/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/realm/realm-java')
                scm.appendNode('connection', 'scm:git@github.com:realm/realm-java.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:realm/realm-java.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

if (version.endsWith('-SNAPSHOT')) { // Only publish if it's a snapshot version
    publishing {
        repositories {
            maven {
                url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
                credentials {
                    // user and password come from the gradle.properties file in ~/.gradle
                    username project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
                    password project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
                }
            }
        }
    }
} else {
    bintray {
        // user and key come from the gradle.properties file in ~/.gradle
        user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
        key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
        publications = ['mavenAndroid']
        publish = true
        pkg {
            repo = 'maven'
            name = 'realm-android'
            licenses = ['Apache-2.0']
        }
    }
}
*/

task findbugs(type: FindBugs) {
    dependsOn assemble
    group = 'Test'

    ignoreFailures = false
    effort = "default"
    reportLevel = "medium"
    excludeFilter = new File("${projectDir}/findbugs-filter.xml")
    classes = files("${projectDir}/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/findbugs/findbugs-output.xml"
        }
        html {
            destination "$project.buildDir/findbugs/findbugs-output.html"
        }
    }
}

task checkstyle(type: Checkstyle) {
    group = 'Test'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    // empty classpath
    classpath = files()
}
