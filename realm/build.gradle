apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 20
    }

// TODO: re-enable once bug-fix is released
//    jacoco {
//        version = '0.7.2.201409121644'
//    }
//
//    buildTypes {
//        debug {
//            testCoverageEnabled true
//        }
//    }


}
dependencies {
    androidTestApt files("../realm-annotations-processor/build/libs/realm-annotations-processor-${version}.jar")
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        group 'Docs'
        description "Generates Javadoc for ${variant.name}."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude "**/internal/**"
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: tasks["generate${variant.name.capitalize()}Javadoc"]) {
        group 'Docs'
        description "Generates Javadoc for ${variant.name} in Jar format."
        classifier = 'javadoc'
        from tasks["generate${variant.name.capitalize()}Javadoc"].destinationDir
    }
}

task generateJar(type: Jar, dependsOn: 'assemble') {
    group 'Build'
    description 'Generates a jar file continaining Realm and its annotation processor'
    from zipTree('build/intermediates/bundles/release/classes.jar')
    from zipTree("../realm-annotations-processor/build/libs/realm-annotations-processor-${version}.jar").matching {
        exclude 'io/realm/annotations/Ignore.class', 'io/realm/annotations/RealmClass.class' // Avoid duplicates
    }
    from(file('src/main/jniLibs')) {
        into 'lib'
    }
}

task buildApt(type: GradleBuild) {
    dir = file('../realm-annotations-processor')
    tasks = ['build']
}

task compileJni(type: GradleBuild) {
    dir = file('../realm-jni')
    tasks = ['buildAndroidJni']
}

tasks.preBuild {
    dependsOn compileJni
    dependsOn buildApt
}
